{% extends 'base.html.twig' %}

{% block title %}Inscription{% endblock %}

{% block body %}
<section class="login-page">
  <div class="form-box">
    <h1>Inscription</h1>

    {% for message in app.flashes('success') %}
      <div class="mb-3">{{ message }}</div>
    {% endfor %}

    {{ form_start(form, { attr: { id: 'registration-form' } }) }}

    <div class="form-group">
      {{ form_label(form.pseudo) }}
      {{ form_widget(form.pseudo) }}
      {{ form_errors(form.pseudo) }}
    </div>

    <div class="form-group">
      {{ form_label(form.nom) }}
      {{ form_widget(form.nom) }}
      {{ form_errors(form.nom) }}
    </div>

    <div class="form-group">
      {{ form_label(form.prenom) }}
      {{ form_widget(form.prenom) }}
      {{ form_errors(form.prenom) }}
    </div>

    <div class="form-group">
      {{ form_label(form.email) }}
      {{ form_widget(form.email) }}
      {{ form_errors(form.email) }}
    </div>

    <div class="form-group">
      {{ form_label(form.plainPassword.first) }}
      {{ form_widget(form.plainPassword.first) }}
      {{ form_errors(form.plainPassword.first) }}
      <div class="password-strength" style="display: none;"></div>
      <div class="strength-meter" style="display: none;"></div>
    </div>

    <div class="form-group">
      {{ form_label(form.plainPassword.second) }}
      {{ form_widget(form.plainPassword.second) }}
      {{ form_errors(form.plainPassword.second) }}
    </div>

    <div class="form-group">
      <button type="submit" class="btn" id="register-btn" disabled>S’inscrire</button>
    </div>

    {{ form_end(form) }}
  </div>
</section>
<script>
document.addEventListener('DOMContentLoaded', function () {
  const form = document.getElementById('registration-form');
  const pseudoField = document.getElementById('{{ form.pseudo.vars.id }}');
  const emailField = document.getElementById('{{ form.email.vars.id }}');
  const passwordField = document.getElementById('{{ form.plainPassword.first.vars.id }}');
  const confirmField = document.getElementById('{{ form.plainPassword.second.vars.id }}');
  const registerBtn = document.getElementById('register-btn');
  const confirmError = document.createElement('div');
  confirmError.className = 'form-error';
  confirmField.parentNode.appendChild(confirmError);
  
  // État de validation
  let isPseudoValid = false;
  let isEmailValid = false;
  let isPasswordValid = false;

  // Création des conteneurs d’erreurs
  const pseudoError = createErrorBox(pseudoField);
  const emailError = createErrorBox(emailField);
  const passwordError = createErrorBox(passwordField);

  // Indicateur de force
  const strengthBar = document.querySelector('.password-strength');
  const strengthMeter = document.querySelector('.strength-meter');
  strengthBar.style.display = 'none';
  strengthMeter.style.display = 'none';

  
  // Vérifie la disponibilité du pseudo
  pseudoField.addEventListener('blur', () => {
    const pseudo = pseudoField.value.trim();
    if (!pseudo) return;

    fetch('{{ path("check_pseudo") }}', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ pseudo })
    })
    .then(res => res.json())
    .then(data => {
      if (data.exists) {
        pseudoError.innerHTML = 'Ce pseudo est déjà utilisé.';
        pseudoField.classList.add('has-error');
        isPseudoValid = false;
      } else {
        pseudoError.innerHTML = '';
        pseudoField.classList.remove('has-error');
        isPseudoValid = true;
      }
      toggleRegisterButton();
    });
  });

  // Vérifie la disponibilité de l’email
  emailField.addEventListener('blur', () => {
    const email = emailField.value.trim();
    if (!email) return;

    fetch('{{ path("check_email") }}', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email })
    })
    .then(res => res.json())
    .then(data => {
      if (data.exists) {
        emailError.innerHTML = 'Cet email est déjà utilisé.';
        emailField.classList.add('has-error');
        isEmailValid = false;
      } else {
        emailError.innerHTML = '';
        emailField.classList.remove('has-error');
        isEmailValid = true;
      }
      toggleRegisterButton();
    });
  });

  // Vérifie la qualité du mot de passe en temps réel
  function validatePassword() {
    const password = passwordField.value;
    const confirm = confirmField.value;

    let errors = [];
    let score = 0;
    if (password === '') {
        strengthBar.innerHTML = '';
        strengthBar.style.display = 'none';
        strengthMeter.innerHTML = '';
        strengthMeter.style.display = 'none';
        isPasswordValid = false;
        toggleRegisterButton();
        return;
      }

      // Si mot de passe tapé, on affiche les éléments
      strengthBar.style.display = 'block';
      strengthMeter.style.display = 'block';
    // Vérification de la force
    if (password.length >= 8) score++;
    if (/[A-Z]/.test(password)) score++;
    if (/[a-z]/.test(password)) score++;
    if (/[0-9]/.test(password)) score++;
    if (/[^A-Za-z0-9]/.test(password)) score++;

    if (password.length < 8) errors.push('• Minimum 8 caractères');
    if (!/[A-Z]/.test(password)) errors.push('• Une majuscule');
    if (!/[a-z]/.test(password)) errors.push('• Une minuscule');
    if (!/[0-9]/.test(password)) errors.push('• Un chiffre');
    if (!/[^A-Za-z0-9]/.test(password)) errors.push('• Un caractère spécial');

    // Mise à jour de la barre de force
    let strength = '';
    let color = '';
    let width = '0%';

    if (score <= 2) {
      strength = 'Faible';
      color = 'red';
      width = '30%';
    } else if (score <= 4) {
      strength = 'Moyen';
      color = 'orange';
      width = '65%';
    } else {
      strength = 'Fort';
      color = 'green';
      width = '100%';
    }

    strengthBar.innerHTML = `<span style="color: ${color}; font-weight: bold;">Mot de passe : ${strength}</span>`;
    
    if (!strengthMeter.querySelector('.fill')) {
      const fill = document.createElement('div');
      fill.className = 'fill';
      strengthMeter.appendChild(fill);
    }

    const fillBar = strengthMeter.querySelector('.fill');
    fillBar.style.width = width;
    fillBar.style.backgroundColor = color;

    // Affichage des erreurs de force
    if (errors.length > 0) {
      passwordError.innerHTML = errors.join('<br>');
      passwordField.classList.add('has-error');
      isPasswordValid = false;
    } else {
      passwordError.innerHTML = '';
      passwordField.classList.remove('has-error');
      isPasswordValid = true;
    }

    // Erreur de correspondance → affiche sous confirmField
    if (password !== confirm) {
      confirmError.innerHTML = '• Les mots de passe ne correspondent pas';
      confirmField.classList.add('has-error');
      isPasswordValid = false;
    } else {
      confirmError.innerHTML = '';
      confirmField.classList.remove('has-error');
    }

    toggleRegisterButton();
  }


  passwordField.addEventListener('input', validatePassword);
  confirmField.addEventListener('input', validatePassword);

  function toggleRegisterButton() {
    registerBtn.disabled = !(isPseudoValid && isEmailValid && isPasswordValid);
  }

  function createErrorBox(field) {
    let box = document.createElement('div');
    box.className = 'form-error';
    field.parentNode.appendChild(box);
    return box;
  }
});
</script>


{% endblock %}
